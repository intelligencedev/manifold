// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package a2a

import "time"

type A2ARequest interface{}

type AgentAuthentication struct {
	// Credentials corresponds to the JSON schema field "credentials".
	Credentials *string `json:"credentials,omitempty" yaml:"credentials,omitempty" mapstructure:"credentials,omitempty"`

	// Schemes corresponds to the JSON schema field "schemes".
	Schemes []string `json:"schemes" yaml:"schemes" mapstructure:"schemes"`
}

type AgentCapabilities struct {
	// PushNotifications corresponds to the JSON schema field "pushNotifications".
	PushNotifications bool `json:"pushNotifications,omitempty" yaml:"pushNotifications,omitempty" mapstructure:"pushNotifications,omitempty"`

	// StateTransitionHistory corresponds to the JSON schema field
	// "stateTransitionHistory".
	StateTransitionHistory bool `json:"stateTransitionHistory,omitempty" yaml:"stateTransitionHistory,omitempty" mapstructure:"stateTransitionHistory,omitempty"`

	// Streaming corresponds to the JSON schema field "streaming".
	Streaming bool `json:"streaming,omitempty" yaml:"streaming,omitempty" mapstructure:"streaming,omitempty"`
}

type AgentCard struct {
	// Authentication corresponds to the JSON schema field "authentication".
	Authentication *AgentAuthentication `json:"authentication,omitempty" yaml:"authentication,omitempty" mapstructure:"authentication,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities AgentCapabilities `json:"capabilities" yaml:"capabilities" mapstructure:"capabilities"`

	// DefaultInputModes corresponds to the JSON schema field "defaultInputModes".
	DefaultInputModes []string `json:"defaultInputModes,omitempty" yaml:"defaultInputModes,omitempty" mapstructure:"defaultInputModes,omitempty"`

	// DefaultOutputModes corresponds to the JSON schema field "defaultOutputModes".
	DefaultOutputModes []string `json:"defaultOutputModes,omitempty" yaml:"defaultOutputModes,omitempty" mapstructure:"defaultOutputModes,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// DocumentationUrl corresponds to the JSON schema field "documentationUrl".
	DocumentationUrl *string `json:"documentationUrl,omitempty" yaml:"documentationUrl,omitempty" mapstructure:"documentationUrl,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Provider corresponds to the JSON schema field "provider".
	Provider *AgentProvider `json:"provider,omitempty" yaml:"provider,omitempty" mapstructure:"provider,omitempty"`

	// Skills corresponds to the JSON schema field "skills".
	Skills []AgentSkill `json:"skills" yaml:"skills" mapstructure:"skills"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url" yaml:"url" mapstructure:"url"`

	// Version corresponds to the JSON schema field "version".
	Version string `json:"version" yaml:"version" mapstructure:"version"`
}

type AgentProvider struct {
	// Organization corresponds to the JSON schema field "organization".
	Organization string `json:"organization" yaml:"organization" mapstructure:"organization"`

	// Url corresponds to the JSON schema field "url".
	Url *string `json:"url,omitempty" yaml:"url,omitempty" mapstructure:"url,omitempty"`
}

type AgentSkill struct {
	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// Examples corresponds to the JSON schema field "examples".
	Examples []string `json:"examples,omitempty" yaml:"examples,omitempty" mapstructure:"examples,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// InputModes corresponds to the JSON schema field "inputModes".
	InputModes []string `json:"inputModes,omitempty" yaml:"inputModes,omitempty" mapstructure:"inputModes,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// OutputModes corresponds to the JSON schema field "outputModes".
	OutputModes []string `json:"outputModes,omitempty" yaml:"outputModes,omitempty" mapstructure:"outputModes,omitempty"`

	// Tags corresponds to the JSON schema field "tags".
	Tags []string `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`
}

type Artifact struct {
	// Append corresponds to the JSON schema field "append".
	Append *bool `json:"append,omitempty" yaml:"append,omitempty" mapstructure:"append,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// Index corresponds to the JSON schema field "index".
	Index int `json:"index,omitempty" yaml:"index,omitempty" mapstructure:"index,omitempty"`

	// LastChunk corresponds to the JSON schema field "lastChunk".
	LastChunk *bool `json:"lastChunk,omitempty" yaml:"lastChunk,omitempty" mapstructure:"lastChunk,omitempty"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Parts corresponds to the JSON schema field "parts".
	Parts []ArtifactPartsElem `json:"parts" yaml:"parts" mapstructure:"parts"`
}

type ArtifactPartsElem interface{}

type AuthenticationInfo struct {
	// Credentials corresponds to the JSON schema field "credentials".
	Credentials *string `json:"credentials,omitempty" yaml:"credentials,omitempty" mapstructure:"credentials,omitempty"`

	// Schemes corresponds to the JSON schema field "schemes".
	Schemes []string `json:"schemes" yaml:"schemes" mapstructure:"schemes"`

	AdditionalProperties interface{} `mapstructure:",remain"`
}

type CancelTaskRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskIdParams `json:"params" yaml:"params" mapstructure:"params"`
}

type CancelTaskResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *JSONRPCError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result *Task `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type DataPart struct {
	// Data corresponds to the JSON schema field "data".
	Data map[string]interface{} `json:"data" yaml:"data" mapstructure:"data"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Type of the part
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

// Represents the content of a file, either as base64 encoded bytes or a URI.
//
// Ensures that either 'bytes' or 'uri' is provided, but not both.
type FileContent struct {
	// Bytes corresponds to the JSON schema field "bytes".
	Bytes *string `json:"bytes,omitempty" yaml:"bytes,omitempty" mapstructure:"bytes,omitempty"`

	// MimeType corresponds to the JSON schema field "mimeType".
	MimeType *string `json:"mimeType,omitempty" yaml:"mimeType,omitempty" mapstructure:"mimeType,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Uri corresponds to the JSON schema field "uri".
	Uri *string `json:"uri,omitempty" yaml:"uri,omitempty" mapstructure:"uri,omitempty"`
}

type FilePart struct {
	// File corresponds to the JSON schema field "file".
	File FileContent `json:"file" yaml:"file" mapstructure:"file"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Type of the part
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

type GetTaskPushNotificationRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskIdParams `json:"params" yaml:"params" mapstructure:"params"`
}

type GetTaskPushNotificationResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *JSONRPCError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result *TaskPushNotificationConfig `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type GetTaskRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskQueryParams `json:"params" yaml:"params" mapstructure:"params"`
}

type GetTaskResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *JSONRPCError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result *Task `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type InternalError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

type InvalidParamsError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

type InvalidRequestError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

type JSONParseError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

type JSONRPCError struct {
	// Code corresponds to the JSON schema field "code".
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Message corresponds to the JSON schema field "message".
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

type JSONRPCMessage struct {
	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`
}

type JSONRPCRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params map[string]interface{} `json:"params,omitempty" yaml:"params,omitempty" mapstructure:"params,omitempty"`
}

type JSONRPCResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *JSONRPCError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result map[string]interface{} `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type Message struct {
	// Metadata corresponds to the JSON schema field "metadata".
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Parts corresponds to the JSON schema field "parts".
	Parts []MessagePartsElem `json:"parts" yaml:"parts" mapstructure:"parts"`

	// Role corresponds to the JSON schema field "role".
	Role MessageRole `json:"role" yaml:"role" mapstructure:"role"`
}

type MessagePartsElem interface{}

type MessageRole string

const MessageRoleAgent MessageRole = "agent"
const MessageRoleUser MessageRole = "user"

type MethodNotFoundError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

type Part interface{}

type PushNotificationConfig struct {
	// Authentication corresponds to the JSON schema field "authentication".
	Authentication *AuthenticationInfo `json:"authentication,omitempty" yaml:"authentication,omitempty" mapstructure:"authentication,omitempty"`

	// Token corresponds to the JSON schema field "token".
	Token *string `json:"token,omitempty" yaml:"token,omitempty" mapstructure:"token,omitempty"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url" yaml:"url" mapstructure:"url"`
}

type PushNotificationNotSupportedError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

type SendTaskRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskSendParams `json:"params" yaml:"params" mapstructure:"params"`
}

type SendTaskResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *JSONRPCError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result *Task `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type SendTaskStreamingRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskSendParams `json:"params" yaml:"params" mapstructure:"params"`
}

type SendTaskStreamingResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *JSONRPCError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result *SendTaskStreamingResponseResult `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type SendTaskStreamingResponseResult struct {
	// Artifact corresponds to the JSON schema field "artifact".
	Artifact Artifact `json:"artifact" yaml:"artifact" mapstructure:"artifact"`

	// Final corresponds to the JSON schema field "final".
	Final bool `json:"final,omitempty" yaml:"final,omitempty" mapstructure:"final,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status TaskStatus `json:"status" yaml:"status" mapstructure:"status"`
}

type SetTaskPushNotificationRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskPushNotificationConfig `json:"params" yaml:"params" mapstructure:"params"`
}

type SetTaskPushNotificationResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *JSONRPCError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result *TaskPushNotificationConfig `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type Task struct {
	// Artifacts corresponds to the JSON schema field "artifacts".
	Artifacts []Artifact `json:"artifacts,omitempty" yaml:"artifacts,omitempty" mapstructure:"artifacts,omitempty"`

	// History corresponds to the JSON schema field "history".
	History []Message `json:"history,omitempty" yaml:"history,omitempty" mapstructure:"history,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// SessionId corresponds to the JSON schema field "sessionId".
	SessionId *string `json:"sessionId,omitempty" yaml:"sessionId,omitempty" mapstructure:"sessionId,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status TaskStatus `json:"status" yaml:"status" mapstructure:"status"`
}

type TaskArtifactUpdateEvent struct {
	// Artifact corresponds to the JSON schema field "artifact".
	Artifact Artifact `json:"artifact" yaml:"artifact" mapstructure:"artifact"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

type TaskIdParams struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

type TaskNotCancelableError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

type TaskNotFoundError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

type TaskPushNotificationConfig struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// PushNotificationConfig corresponds to the JSON schema field
	// "pushNotificationConfig".
	PushNotificationConfig PushNotificationConfig `json:"pushNotificationConfig" yaml:"pushNotificationConfig" mapstructure:"pushNotificationConfig"`
}

type TaskQueryParams struct {
	// HistoryLength corresponds to the JSON schema field "historyLength".
	HistoryLength *int `json:"historyLength,omitempty" yaml:"historyLength,omitempty" mapstructure:"historyLength,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

type TaskResubscriptionRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskQueryParams `json:"params" yaml:"params" mapstructure:"params"`
}

type TaskSendParams struct {
	// HistoryLength corresponds to the JSON schema field "historyLength".
	HistoryLength *int `json:"historyLength,omitempty" yaml:"historyLength,omitempty" mapstructure:"historyLength,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Message corresponds to the JSON schema field "message".
	Message Message `json:"message" yaml:"message" mapstructure:"message"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// PushNotification corresponds to the JSON schema field "pushNotification".
	PushNotification *PushNotificationConfig `json:"pushNotification,omitempty" yaml:"pushNotification,omitempty" mapstructure:"pushNotification,omitempty"`

	// SessionId corresponds to the JSON schema field "sessionId".
	SessionId *string `json:"sessionId,omitempty" yaml:"sessionId,omitempty" mapstructure:"sessionId,omitempty"`
}

type TaskState string

const TaskStateCanceled TaskState = "canceled"
const TaskStateCompleted TaskState = "completed"

type SendTaskStreamingResponseResult_0 = TaskStatusUpdateEvent
type SendTaskStreamingResponseResult_1 = TaskArtifactUpdateEvent

const TaskStateFailed TaskState = "failed"
const TaskStateInputRequired TaskState = "input-required"
const TaskStateSubmitted TaskState = "submitted"
const TaskStateUnknown TaskState = "unknown"
const TaskStateWorking TaskState = "working"

type TaskStatus struct {
	// Message corresponds to the JSON schema field "message".
	Message *Message `json:"message,omitempty" yaml:"message,omitempty" mapstructure:"message,omitempty"`

	// State corresponds to the JSON schema field "state".
	State TaskState `json:"state" yaml:"state" mapstructure:"state"`

	// Timestamp corresponds to the JSON schema field "timestamp".
	Timestamp *time.Time `json:"timestamp,omitempty" yaml:"timestamp,omitempty" mapstructure:"timestamp,omitempty"`
}

type TaskStatusUpdateEvent struct {
	// Final corresponds to the JSON schema field "final".
	Final bool `json:"final,omitempty" yaml:"final,omitempty" mapstructure:"final,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status TaskStatus `json:"status" yaml:"status" mapstructure:"status"`
}

type TextPart struct {
	// Metadata corresponds to the JSON schema field "metadata".
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Text corresponds to the JSON schema field "text".
	Text string `json:"text" yaml:"text" mapstructure:"text"`

	// Type of the part
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

type UnsupportedOperationError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}
